<?php namespace Manevia;

    /********************************************************************************
     * [MODEL_NAME_UPPERCASE] BASE MODEL
     * PHP version 7.1
     * Auto Generated via ../cli/model_builder_docs/BaseModelBuilder.php
     ********************************************************************************/

        class [MODEL_NAME]Model extends Model
        {
            /********************************************************************************
             * CLASS VARIABLES
             * @var string $id
             * @var string $data
             * @var int $expires
             ********************************************************************************/

[CLASS_VARIABLES]

            /********************************************************************************
             * CLASS CONSTANTS
             * @var array DATA_TYPES
             * @var array REQUIRED_FIELDS
             * @var string TABLE_NAME
             ********************************************************************************/

                const DATA_TYPES =
                [
[CLASS_CONSTANT_DATA_TYPES]
                ];

                const TABLE_NAME      = '[TABLE_NAME]';
                const PRIMARY_KEY     = '[PRIMARY_KEY]';
                const REQUIRED_FIELDS = [[CLASS_CONSTANT_REQUIRED_FIELDS]];

            /********************************************************************************
             * CLASS CONSTRUCTOR
             * @param array $data
             ********************************************************************************/

                protected function __construct(Array $data) {parent::__construct($data);}

            /********************************************************************************
             * GETTERS
             * Methods that return individual class variables.
             ********************************************************************************/

[GETTERS]

            /********************************************************************************
             * CREATE METHOD
             * @param array $data An array values to update
             * @returns object
             ********************************************************************************/

                public static function create(Array $data)
                {
					// RUN BEFORE CREATE CALLBACK | SET INITIAL VARIABLES | SANITIZE DATA

                        $data = call_user_func('static::beforeCreate', $data);
                        $data = self::sanitize($data);
                        $[MODEL_NAME_FIRST_LETTER_LOWERCASE] = NULL;

                    // VALIDATE DATA -> INSERT INTO DATABASE AND RETURN MODEL INSTANCE

                        if
                        (
[CREATE_METHOD_VALIDATION_CRITERIA]
                        )
                        {
                            // ADD NULL VALUES

                                foreach (self::DATA_TYPES as $key => $dataType)
                                {
                                    if
                                    (
                                        empty($data[$key]) &&
                                        !in_array($key, self::REQUIRED_FIELDS) &&
                                        $key != self::PRIMARY_KEY
                                    )
                                    {$data[$key] = NULL;}
                                }

                            // ADD TO DATABASE

                                $statement = DB::prepare("INSERT INTO `[TABLE_NAME]` ([CREATE_METHOD_COLUMN_NAMES]) values ([CREATE_QUERY_COLUMN_PLACEHOLDERS])");
                                $statement->bind_param('[CREATE_METHOD_BIND_TYPES]', [CREATE_METHOD_BIND_DATA_STRING]);
                                $statement->execute();

                            // CREATE MODEL INSTANCE | CLOSE PREPARED STATEMENT

                                if ($statement->affected_rows == 1)
                                {
                                    $[MODEL_NAME_FIRST_LETTER_LOWERCASE] = [MODEL_NAME]::get($statement->insert_id);
                                    call_user_func([$[MODEL_NAME_FIRST_LETTER_LOWERCASE], 'afterCreate']);
                                }

                                $statement->close();
                        }

					// RUN AFTER CREATE CALLBACK | RETURN MODEL

                        return $[MODEL_NAME_FIRST_LETTER_LOWERCASE];
                }

            /********************************************************************************
             * GET METHOD
             * @param integer $id
             * @returns object [MODEL_NAME] object
             ********************************************************************************/

                public static function get($id)
                {
                    // RUN BEFORE GET CALLBACK | SET INITIAL VARIABLES

                        $id = call_user_func('static::beforeGet', $id);
                        $id = self::sanitize([$id])[0];
                        $[MODEL_NAME_FIRST_LETTER_LOWERCASE] = NULL;

                    // VALIDATE PASSED VARIABLE | QUERY DATABASE FOR MODEL DATA AND CREATE MODEL | RUN AFTER CREATE CALLBACK

                        if (!empty($id))
                        {
                            $result = DB::query("SELECT [ALL_COLUMN_NAMES] FROM [TABLE_NAME] WHERE `id` = '{$id}'");

                            if ($result instanceof \mysqli_result && $result->num_rows == 1)
                            {
                                $data = $result->fetch_assoc();
                                $[MODEL_NAME_FIRST_LETTER_LOWERCASE] = new [MODEL_NAME]($data);
                                call_user_func([$[MODEL_NAME_FIRST_LETTER_LOWERCASE], 'afterGet']);
                            }
                        }

                    // RETURN MODEL

                        return $[MODEL_NAME_FIRST_LETTER_LOWERCASE];
                }
        }

?>
